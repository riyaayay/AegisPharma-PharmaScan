# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WIIUYkusicxxNMFxvAN0m-gINWHViY8r
"""

!pip install langchain openai faiss-cpu python-dotenv

!pip install -U langchain-community

import os
os.environ["OPENAI_API_KEY"] = "YOUR_OPENAI_API_KEY"

import pandas as pd
# Upload your CSV file manually in Colab or from URL
df = pd.read_csv('/content/Drugs - Sheet2.csv')
# Preview
print(df.head())

from langchain.docstore.document import Document

docs = []
for _, row in df.iterrows():
    content = f"Drug: {row['Drug Name']}\nADR Category: {row['ADR Category']}\nADR Symptom: {row['ADR Symptom']}\nSeverity: {row.get('Severity', 'N/A')}\nSource: {row['Source']}"
    docs.append(Document(page_content=content))

import os
os.environ["OPENAI_API_KEY"] = "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"

!pip install -U langchain-openai

from langchain_openai import OpenAIEmbeddings

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer
from langchain.embeddings import HuggingFaceEmbeddings

model_name = "sentence-transformers/all-MiniLM-L6-v2"
local_embedding_model = HuggingFaceEmbeddings(model_name=model_name)

vectorstore = FAISS.from_documents(docs, local_embedding_model)

def sentinel_agent(text):
    # Iterate drug names in DataFrame
    for drug in df['Drug Name'].unique():
        if drug.lower() in text.lower():
            # Extract first symptom for simplicity
            symptom_row = df[df['Drug Name'] == drug].iloc[0]
            symptom = symptom_row['ADR Symptom']
            return {"drug": drug, "symptom": symptom}
    return None

from langchain.docstore.document import Document

docs = []
for _, row in df.iterrows():
    content = f"Drug: {row['Drug Name']}\nCategory: {row['ADR Category']}\nSymptom: {row['ADR Symptom']}\nSeverity: {row['Severity (if mentioned)']}\nSource: {row['Source']}"
    docs.append(Document(page_content=content))

from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS

local_embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
vectorstore = FAISS.from_documents(docs, local_embedding_model)

def scribe_agent(analyst_output):
    if analyst_output["score"] > 0.7:
        return f"CIOMS compliant ADR report generated:\n{analyst_output['report']}"
    else:
        return "No significant ADR found."

def communicator_agent(contact_info):
    print(f"Calling {contact_info} for follow-up...")
    # Integration with voice/SMS can be done here
    return "Follow-up done."

def orchestrator_agent(user_input, contact_info=None):
    signal = sentinel_agent(user_input)
    if not signal:
        return "No drug or symptom detected."

    analysis = analyst_agent(signal)
    if analysis["score"] > 0.7:
        report = scribe_agent(analysis)
        if contact_info:
            communicator_agent(contact_info)
        return report
    else:
        return "Signal not significant enough for reporting."

class DummyLLM:
    def __call__(self, prompt):
        return "This is a mocked response, nausea is a known common ADR for paracetamol."

dummy_llm = DummyLLM()

def analyst_agent(signal):
    # Instead of OpenAI call, use dummy LLM
    query = f"Is '{signal['symptom']}' common for '{signal['drug']}'?"
    result = dummy_llm(query)
    score = 0.9 if "nausea" in result.lower() else 0.5
    return {"report": result, "score": score}

if __name__ == "__main__":
    user_text = "After taking paracetamol, I had nausea and vomiting."
    contact = "+911234567890"
    print(orchestrator_agent(user_text, contact))